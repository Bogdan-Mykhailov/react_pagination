{"version":3,"sources":["utils/utils.ts","components/Pagination/Pagination.tsx","utils/constants.ts","App.tsx","hooks/usePagination.ts","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","onPageChange","currentPage","perPage","total","totalPageCount","Math","ceil","isFirstPageIndex","isLastPageIndex","paginationRange","className","classNames","disabled","href","onClick","map","page","active","items","optionsValue","App","useState","itemsPerPage","setItemsPerPage","setCurrentPage","length","firstItemIndex","lastItemIndex","selectedItems","slice","onSelectChange","event","currentTarget","value","usePagination","id","onChange","itemSize","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"6LAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCIIG,EAAkC,SAAC,GAKzC,IAJLC,EAII,EAJJA,aACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QACAC,EACI,EADJA,MAEMC,EAAiBC,KAAKC,KAAKH,EAAQD,GACnCK,EAAmC,IAAhBN,EACnBO,EAAkBP,IAAgBG,EAClCK,EAAkBhB,EAAW,EAAGW,GAWtC,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAAUL,IAFd,SAKE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QAtBwB,WAC9B,OAAQP,GACHP,EAAaC,EAAc,IAe5B,oBAUDQ,EAAgBM,KAAI,SAAAC,GAAI,OACvB,oBAEEN,UAAWC,IAAW,YAAa,CACjCM,OAAQD,IAASf,IAHrB,SAME,mBACE,UAAQ,WACRS,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMd,EAAagB,IAJ9B,SAMGA,KAXEA,MAeT,oBAAIN,UAAWC,IACb,YACA,CAAEC,SAAUJ,IAFd,SAKE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAjDoB,WAC1B,OAAQN,GACHR,EAAaC,EAAc,IA0C5B,wBCpEKiB,EAAQzB,EAAW,EAAG,IAChCsB,KAAI,SAAAlB,GAAC,qBAAYA,MACPsB,EAAe,CAAC,EAAG,EAAG,GAAI,I,cCG1BC,EAAU,WACrB,MCD2B,WAC3B,MAAwCC,mBFHP,GEGjC,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBFHN,GEGhC,mBAAOpB,EAAP,KAAoBuB,EAApB,KAEMrB,EAAQe,EAAMO,OACdC,GAAkBzB,EAAc,GAAKqB,EACrCK,EAAgB1B,EAAcqB,EAAenB,EAC/CF,EAAcqB,EACdnB,EAYJ,MAAO,CACLF,cACAqB,eACAnB,QACAyB,cAfoBV,EAAMW,MAAMH,EAAgBC,GAgBhD3B,aATmB,SAACgB,GACpBQ,EAAeR,IASfc,eAfqB,SAACC,GACtBR,GAAiBQ,EAAMC,cAAcC,OACrCT,EFd8B,IE4B9BE,iBACAC,iBDlBEO,GARF/B,EADF,EACEA,MACAH,EAFF,EAEEA,aACAsB,EAHF,EAGEA,aACAM,EAJF,EAIEA,cACA3B,EALF,EAKEA,YACA6B,EANF,EAMEA,eACAH,EAPF,EAOEA,cACAD,EARF,EAQEA,eAGF,OACE,sBAAKhB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWT,EADX,mBACiCyB,EAAiB,EADlD,cACyDC,EADzD,eAC6ExB,EAD7E,OAIA,sBAAKO,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRyB,GAAG,kBACHzB,UAAU,eACVuB,MAAOX,EACPc,SAAUN,EALZ,SAOGX,EAAaJ,KAAI,SAAAsB,GAAQ,OACxB,wBAAuBJ,MAAOI,EAA9B,SAAyCA,GAA5BA,UAKnB,uBAAOC,QAAQ,kBAAkB5B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEP,MAAOA,EACPD,QAASoB,EACTrB,YAAaA,EACbD,aAAcA,IAGhB,6BACG4B,EAAcb,KAAI,SAAAwB,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YErDnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a6424cb5.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils/utils';\n\ninterface PaginationProps {\n  total: number\n  perPage: number\n  currentPage: number\n  onPageChange: (currentPage: number) => void\n}\n\nexport const Pagination: FC<PaginationProps> = ({\n  onPageChange,\n  currentPage,\n  perPage,\n  total,\n}) => {\n  const totalPageCount = Math.ceil(total / perPage);\n  const isFirstPageIndex = currentPage === 1;\n  const isLastPageIndex = currentPage === totalPageCount;\n  const paginationRange = getNumbers(1, totalPageCount);\n  const handlePreviousPageClick = () => {\n    return !isFirstPageIndex\n      && onPageChange(currentPage - 1);\n  };\n\n  const handleNextPageClick = () => {\n    return !isLastPageIndex\n      && onPageChange(currentPage + 1);\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames(\n        'page-item',\n        { disabled: isFirstPageIndex },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPageIndex}\n          onClick={handlePreviousPageClick}\n        >\n          «\n        </a>\n      </li>\n      {paginationRange.map(page => (\n        <li\n          key={page}\n          className={classNames('page-item', {\n            active: page === currentPage,\n          })}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n      <li className={classNames(\n        'page-item',\n        { disabled: isLastPageIndex },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPageIndex}\n          onClick={handleNextPageClick}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n\n  );\n};\n","import { getNumbers } from './utils';\n\nexport const items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\nexport const optionsValue = [3, 5, 10, 20];\nexport const defaultItemsPerPage = 5;\nexport const defaultCurrentPage = 1;\n","import { FC } from 'react';\nimport './App.css';\n\nimport { Pagination } from './components/Pagination';\nimport { optionsValue } from './utils/constants';\nimport { usePagination } from './hooks/usePagination';\n\nexport const App: FC = () => {\n  const {\n    total,\n    onPageChange,\n    itemsPerPage,\n    selectedItems,\n    currentPage,\n    onSelectChange,\n    lastItemIndex,\n    firstItemIndex,\n  } = usePagination();\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItemIndex + 1} - ${lastItemIndex} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={onSelectChange}\n          >\n            {optionsValue.map(itemSize => (\n              <option key={itemSize} value={itemSize}>{itemSize}</option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={onPageChange}\n      />\n\n      <ul>\n        {selectedItems.map(item => (\n          <li key={item} data-cy=\"item\">{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { ChangeEvent, useState } from 'react';\nimport {\n  defaultCurrentPage,\n  defaultItemsPerPage,\n  items,\n} from '../utils/constants';\n\nexport const usePagination = () => {\n  const [itemsPerPage, setItemsPerPage] = useState(defaultItemsPerPage);\n  const [currentPage, setCurrentPage] = useState(defaultCurrentPage);\n\n  const total = items.length;\n  const firstItemIndex = (currentPage - 1) * itemsPerPage;\n  const lastItemIndex = currentPage * itemsPerPage < total\n    ? currentPage * itemsPerPage\n    : total;\n  const selectedItems = items.slice(firstItemIndex, lastItemIndex);\n\n  const onSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setItemsPerPage(+event.currentTarget.value);\n    setCurrentPage(defaultCurrentPage);\n  };\n\n  const onPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  return {\n    currentPage,\n    itemsPerPage,\n    total,\n    selectedItems,\n    onPageChange,\n    onSelectChange,\n    firstItemIndex,\n    lastItemIndex,\n  };\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}